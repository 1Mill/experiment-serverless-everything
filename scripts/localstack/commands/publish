#!/usr/bin/env bash
set -e

function aws_to_json_object() {
	local aws_object=$1

	echo $aws_object | jq --compact-output --raw-input --sort-keys '
		split(" ")
		| .[1:-1] # * Remove brackets (e.g. "{ ... }")
		| map(split("="))
		| map({ "key": .[0], "value": .[1] })
		| from_entries
	'
}

function json_to_aws_object() {
	local json_object=$1

	local string=$(echo $json_object | jq --compact-output --sort-keys '
		to_entries
		| map([.key, .value])
		| map(join("="))
		| join(",")
	')

	# * Wrap output in brackets to align with expected AWS format and
	# * remove quotes output by jq (e.g. { "MY_KEY=..." } => { MY_KEY=... })
	echo { ${string:1:-1} }
}

function publish() {
	# * Props
	local path=$1

	# * Load environmental variables
	# ! The environmental variables file must be loaded first
	# ! so that the config file can use its values later on
	local env_path=$(pwd)/$path/$LAMBDA_ENV_FILENAME
	if [ -f "$env_path" ]; then
		source $env_path
	fi

	# * Load config variables into environment
	local config_path=$(pwd)/$path/$LAMBDA_CONFIG_FILENAME
	source $config_path

	# * Computed values
	local dev_env=${DEV_ENV-"{}"}
	local name=$NAME
	local timeout=$TIMEOUT

	local dev_env_json=$(aws_to_json_object "$dev_env")
	local reserved_env_json=$(aws_to_json_object "{
		AWS_ACCESS_KEY=$AWS_ACCESS_KEY_ID
		AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
		AWS_REGION=$LOCALSTACK_REGION
		AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
		MILL_LAMBDA_AWS_ENDPOINT=http://localstack:4566/
	}")
	local env_json=$(echo $dev_env_json $reserved_env_json | jq --compact-output --slurp '.[0] * .[1]') # * Merge json objects
	local env=$(json_to_aws_object "$env_json")

	# * Run command
	aws lambda delete-function \
		--endpoint $LOCALSTACK_URL \
		--function-name $name \
		--no-cli-pager \
		--region $LOCALSTACK_REGION || true # ! If the lambda does not exist, do not throw a "not found" error

	aws lambda create-function \
		--code ImageUri=$name \
		--endpoint $LOCALSTACK_URL \
		--environment "Variables=$env" \
		--function-name $name \
		--no-cli-pager \
		--package-type Image \
		--region $LOCALSTACK_REGION \
		--role arn:aws:iam::000000000:role/lambda-placeholder \
		--timeout $timeout
}

publish $1
